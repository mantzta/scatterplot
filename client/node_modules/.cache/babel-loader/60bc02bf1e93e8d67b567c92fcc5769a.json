{"ast":null,"code":"import _classCallCheck from \"/Users/tamara/Documents/scatterplot/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tamara/Documents/scatterplot/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/tamara/Documents/scatterplot/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/tamara/Documents/scatterplot/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/tamara/Documents/scatterplot/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/tamara/Documents/scatterplot/client/src/App/ScatterPlot/ScatterPlot.js\";\nimport React, { Component } from \"react\";\nimport Axis from \"../Axis/Axis\";\nimport DataVisulisation from \"../DataVisulisation/DataVisulisation\";\nimport Regression from \"../Regression/Regression\";\nimport Legend from \"../Legend/Legend\";\nimport { Scales } from \"../utils/Scales\";\n\nvar ScatterPlot =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ScatterPlot, _Component);\n\n  function ScatterPlot(props) {\n    var _this;\n\n    _classCallCheck(this, ScatterPlot);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ScatterPlot).call(this, props));\n    _this.height = 400;\n    _this.padding = 50;\n    _this.width = 400;\n    _this.scalesInstance = Scales(_this.width, _this.height, _this.padding, _this.props.data);\n    _this.colors = [\"aqua\", \"red\", \"green\"];\n    _this.datasets = _this.getDataInfo();\n    return _this;\n  }\n  /**\n   * @return {object}\n   */\n\n\n  _createClass(ScatterPlot, [{\n    key: \"getDataInfo\",\n    value: function getDataInfo() {\n      var _this2 = this;\n\n      var info = {};\n      Object.keys(this.props.data).forEach(function (key, i) {\n        info[key] = {\n          color: _this2.colors[i],\n          data: _this2.props.data[key],\n          name: key\n        };\n      });\n      return info;\n    }\n    /**\n     * @return {array}\n     */\n\n  }, {\n    key: \"renderData\",\n    value: function renderData() {\n      var _this3 = this;\n\n      var vis = [];\n      Object.keys(this.datasets).forEach(function (key, i) {\n        var dataVis = React.createElement(DataVisulisation, {\n          key: \"data-\".concat(key),\n          data: _this3.datasets[key],\n          scalesInstance: _this3.scalesInstance,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42\n          },\n          __self: this\n        });\n        var regression = React.createElement(Regression, {\n          key: \"regression-\".concat(key),\n          data: _this3.datasets[key],\n          scalesInstance: _this3.scalesInstance,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44\n          },\n          __self: this\n        });\n        vis.push(dataVis);\n        vis.push(regression);\n      });\n      return vis;\n    }\n  }, {\n    key: \"renderButtons\",\n    value: function renderButtons() {\n      var buttons = [];\n      Object.keys(this.datasets).forEach(function (key, i) {\n        var button = React.createElement(Button, {\n          key: \"button-\".concat(key),\n          name: key,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58\n          },\n          __self: this\n        });\n        buttons.push(button);\n      });\n      return buttons;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(\"svg\", {\n        width: this.width,\n        height: this.height,\n        style: {\n          background: \"grey\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, React.createElement(Axis, {\n        scale: this.xScale,\n        dimension: \"x\",\n        height: this.height,\n        padding: this.padding,\n        scalesInstance: this.scalesInstance,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }), React.createElement(Axis, {\n        scale: this.yScale,\n        dimension: \"y\",\n        height: this.height,\n        padding: this.padding,\n        scalesInstance: this.scalesInstance,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }), this.renderData(), React.createElement(Legend, {\n        datasets: this.datasets,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return ScatterPlot;\n}(Component);\n\nexport default ScatterPlot;","map":{"version":3,"sources":["/Users/tamara/Documents/scatterplot/client/src/App/ScatterPlot/ScatterPlot.js"],"names":["React","Component","Axis","DataVisulisation","Regression","Legend","Scales","ScatterPlot","props","height","padding","width","scalesInstance","data","colors","datasets","getDataInfo","info","Object","keys","forEach","key","i","color","name","vis","dataVis","regression","push","buttons","button","background","xScale","yScale","renderData"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Axis from \"../Axis/Axis\";\nimport DataVisulisation from \"../DataVisulisation/DataVisulisation\";\nimport Regression from \"../Regression/Regression\";\nimport Legend from \"../Legend/Legend\";\nimport { Scales } from \"../utils/Scales\";\n\nclass ScatterPlot extends Component {\n  constructor(props) {\n    super(props);\n    this.height = 400;\n    this.padding  = 50;\n    this.width= 400;\n    this.scalesInstance = Scales(this.width, this.height, this.padding, this.props.data);\n    this.colors = [`aqua`, `red`, `green`];\n    this.datasets = this.getDataInfo();\n  }\n\n  /**\n   * @return {object}\n   */\n  getDataInfo() {\n    const info = {}\n\n    Object.keys(this.props.data).forEach((key, i) => {\n      info[key] = {\n        color: this.colors[i],\n        data: this.props.data[key],\n        name: key\n      };\n    });\n    return info;\n  }\n\n  /**\n   * @return {array}\n   */\n  renderData() {\n    const vis = [];\n\n    Object.keys(this.datasets).forEach((key, i) => {\n      const dataVis = <DataVisulisation key={`data-${key}`} data={this.datasets[key]}\n        scalesInstance={this.scalesInstance} />;\n      const regression = <Regression key={`regression-${key}`} data={this.datasets[key]}\n        scalesInstance={this.scalesInstance} />;\n\n      vis.push(dataVis);\n      vis.push(regression);\n    });\n\n    return vis;\n  }\n\n  renderButtons() {\n    const buttons = [];\n\n    Object.keys(this.datasets).forEach((key, i) => {\n      const button = <Button key={`button-${key}`} name={key} />;\n\n      buttons.push(button);\n    });\n\n    return buttons;\n  }\n\n  render() {\n    return (\n      <div>\n        <svg width={this.width} height={this.height} style={{background: \"grey\"}}>\n          <Axis scale={this.xScale} dimension=\"x\" height={this.height} padding={this.padding}\n            scalesInstance={this.scalesInstance} />\n          <Axis scale={this.yScale} dimension=\"y\" height={this.height} padding={this.padding}\n            scalesInstance={this.scalesInstance} />\n          {this.renderData()}\n          <Legend datasets={this.datasets} />\n        </svg>\n      </div>\n    );\n  }\n}\n\nexport default ScatterPlot;"]},"metadata":{},"sourceType":"module"}