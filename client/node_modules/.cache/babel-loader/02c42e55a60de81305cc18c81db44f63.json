{"ast":null,"code":"import * as d3 from \"d3\";\n/**\n * @param {number} width\n * @param {number} height\n * @param {number} padding\n * @param {object} data\n * @return {object}\n */\n\nexport function Scales(width, height, padding, data) {\n  var maxX, maxY;\n  /**\n   * Returns maximal value within dataset\n   * @param {string} dimension either x or y\n   * @param {object} data\n   * @return {number}\n   */\n\n  function getMax(dimension, data) {\n    /* eslint-disable no-console */\n    console.log(data);\n    var max = [];\n    Object.entries(data).forEach(function (set) {\n      max.push(d3.max(set[1], function (d) {\n        return d[dimension];\n      }));\n    });\n    return d3.max(max);\n  }\n  /**\n   * @return {object<string, function>}\n   */\n\n\n  function getScales() {\n    var xScale = d3.scaleLinear().domain([0, maxX]).range([padding, width - padding]);\n    var yScale = d3.scaleLinear().domain([0, maxY]).range([height - padding, padding]);\n    var scales = {\n      x: xScale,\n      y: yScale\n    };\n    return scales;\n  }\n\n  maxX = getMax(\"x\", data);\n  maxY = getMax(\"y\", data);\n  return {\n    getScales: getScales\n  };\n}","map":{"version":3,"sources":["/Users/tamara/Documents/scatterplot/client/src/App/utils/Scales.js"],"names":["d3","Scales","width","height","padding","data","maxX","maxY","getMax","dimension","console","log","max","Object","entries","forEach","set","push","d","getScales","xScale","scaleLinear","domain","range","yScale","scales","x","y"],"mappings":"AAAA,OAAO,KAAKA,EAAZ,MAAoB,IAApB;AAEA;;;;;;;;AAOA,OAAO,SAASC,MAAT,CAAgBC,KAAhB,EAAuBC,MAAvB,EAA+BC,OAA/B,EAAwCC,IAAxC,EAA8C;AACnD,MAAIC,IAAJ,EAAUC,IAAV;AAEA;;;;;;;AAMA,WAASC,MAAT,CAAgBC,SAAhB,EAA2BJ,IAA3B,EAAiC;AAC/B;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAYN,IAAZ;AACA,QAAMO,GAAG,GAAG,EAAZ;AAEAC,IAAAA,MAAM,CAACC,OAAP,CAAeT,IAAf,EAAqBU,OAArB,CAA6B,UAAAC,GAAG,EAAI;AAClCJ,MAAAA,GAAG,CAACK,IAAJ,CAASjB,EAAE,CAACY,GAAH,CAAOI,GAAG,CAAC,CAAD,CAAV,EAAe,UAACE,CAAD,EAAO;AAC7B,eAAOA,CAAC,CAACT,SAAD,CAAR;AACD,OAFQ,CAAT;AAGD,KAJD;AAMA,WAAOT,EAAE,CAACY,GAAH,CAAOA,GAAP,CAAP;AACD;AAED;;;;;AAGA,WAASO,SAAT,GAAqB;AACnB,QAAMC,MAAM,GAAGpB,EAAE,CAACqB,WAAH,GACZC,MADY,CACL,CAAC,CAAD,EAAIhB,IAAJ,CADK,EAEZiB,KAFY,CAEN,CAACnB,OAAD,EAAUF,KAAK,GAAGE,OAAlB,CAFM,CAAf;AAIA,QAAMoB,MAAM,GAAGxB,EAAE,CAACqB,WAAH,GACZC,MADY,CACL,CAAC,CAAD,EAAIf,IAAJ,CADK,EAEZgB,KAFY,CAEN,CAACpB,MAAM,GAAGC,OAAV,EAAmBA,OAAnB,CAFM,CAAf;AAIA,QAAMqB,MAAM,GAAG;AAACC,MAAAA,CAAC,EAAEN,MAAJ;AAAYO,MAAAA,CAAC,EAAEH;AAAf,KAAf;AAEA,WAAOC,MAAP;AACD;;AAEDnB,EAAAA,IAAI,GAAGE,MAAM,MAAMH,IAAN,CAAb;AACAE,EAAAA,IAAI,GAAGC,MAAM,MAAMH,IAAN,CAAb;AAEA,SAAO;AACLc,IAAAA,SAAS,EAATA;AADK,GAAP;AAGD","sourcesContent":["import * as d3 from \"d3\";\n\n/**\n * @param {number} width\n * @param {number} height\n * @param {number} padding\n * @param {object} data\n * @return {object}\n */\nexport function Scales(width, height, padding, data) {\n  let maxX, maxY;\n\n  /**\n   * Returns maximal value within dataset\n   * @param {string} dimension either x or y\n   * @param {object} data\n   * @return {number}\n   */\n  function getMax(dimension, data) {\n    /* eslint-disable no-console */\n    console.log(data)\n    const max = []\n\n    Object.entries(data).forEach(set => {\n      max.push(d3.max(set[1], (d) => {\n        return d[dimension];\n      }));\n    });\n\n    return d3.max(max);\n  }\n\n  /**\n   * @return {object<string, function>}\n   */\n  function getScales() {\n    const xScale = d3.scaleLinear()\n      .domain([0, maxX])\n      .range([padding, width - padding]);\n\n    const yScale = d3.scaleLinear()\n      .domain([0, maxY])\n      .range([height - padding, padding]);\n\n    const scales = {x: xScale, y: yScale};\n\n    return scales;\n  }\n\n  maxX = getMax(`x`, data);\n  maxY = getMax(`y`, data);\n\n  return {\n    getScales\n  }\n}\n"]},"metadata":{},"sourceType":"module"}