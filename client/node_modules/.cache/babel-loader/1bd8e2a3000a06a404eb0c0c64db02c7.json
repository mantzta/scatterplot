{"ast":null,"code":"import _classCallCheck from \"/Users/tamara/Documents/scatterplot/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tamara/Documents/scatterplot/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/tamara/Documents/scatterplot/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/tamara/Documents/scatterplot/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/tamara/Documents/scatterplot/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/tamara/Documents/scatterplot/client/src/App/ScatterPlot/ScatterPlot.js\";\nimport React, { Component } from \"react\";\nimport Axis from \"../Axis/Axis\";\nimport Legend from \"../Legend/Legend\";\nimport { Scales } from \"../utils/Scales\";\nimport Regression from \"../Regression/Regression\";\n\nvar ScatterPlot =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ScatterPlot, _Component);\n\n  function ScatterPlot(props) {\n    var _this;\n\n    _classCallCheck(this, ScatterPlot);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ScatterPlot).call(this, props));\n    _this.height = 400;\n    _this.padding = 50;\n    _this.width = 400;\n    _this.scalesInstance = Scales(_this.width, _this.height, _this.padding, _this.props.data);\n    _this.colors = [\"aqua\", \"red\", \"green\"];\n    _this.datasets = _this.getDataInfo();\n    _this.state = {\n      degree: 3,\n      dataVisualisations: []\n    };\n    return _this;\n  }\n  /**\n   * @return {object}\n   */\n\n\n  _createClass(ScatterPlot, [{\n    key: \"getDataInfo\",\n    value: function getDataInfo() {\n      var _this2 = this;\n\n      var info = {};\n      Object.keys(this.props.data).forEach(function (key, i) {\n        info[key] = {\n          color: _this2.colors[i],\n          data: _this2.props.data[key],\n          name: key\n        };\n      });\n      return info;\n    }\n  }, {\n    key: \"onClick\",\n    value: function onClick() {\n      var _this3 = this;\n\n      var dataVisualisations = [];\n      Object.keys(this.props.datasets).forEach(function (key) {\n        if (document.querySelector(\"[data-name=\".concat(key, \"]\")).length > 0) {\n          var dataVis = React.createElement(Regression, {\n            key: \"regression-\".concat(key),\n            data: _this3.datasets[key],\n            scalesInstance: _this3.scalesInstance,\n            degree: _this3.state.degree,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 43\n            },\n            __self: this\n          });\n          dataVisualisations.push(dataVis);\n        }\n      });\n      this.setState({\n        dataVisualisations: dataVisualisations\n      });\n    }\n  }, {\n    key: \"onChange\",\n    value: function onChange(event) {\n      this.setState({\n        degree: event.target.value\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"scatterplot\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, React.createElement(\"svg\", {\n        width: this.width,\n        height: this.height,\n        style: {\n          background: \"grey\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, React.createElement(Axis, {\n        scale: this.xScale,\n        dimension: \"x\",\n        height: this.height,\n        padding: this.padding,\n        scalesInstance: this.scalesInstance,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }), React.createElement(Axis, {\n        scale: this.yScale,\n        dimension: \"y\",\n        height: this.height,\n        padding: this.padding,\n        scalesInstance: this.scalesInstance,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }), React.createElement(Legend, {\n        datasets: this.datasets,\n        scalesInstance: this.scalesInstance,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return ScatterPlot;\n}(Component);\n\nexport default ScatterPlot;","map":{"version":3,"sources":["/Users/tamara/Documents/scatterplot/client/src/App/ScatterPlot/ScatterPlot.js"],"names":["React","Component","Axis","Legend","Scales","Regression","ScatterPlot","props","height","padding","width","scalesInstance","data","colors","datasets","getDataInfo","state","degree","dataVisualisations","info","Object","keys","forEach","key","i","color","name","document","querySelector","length","dataVis","push","setState","event","target","value","background","xScale","yScale"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Axis from \"../Axis/Axis\";\nimport Legend from \"../Legend/Legend\";\nimport { Scales } from \"../utils/Scales\";\nimport Regression from \"../Regression/Regression\";\n\nclass ScatterPlot extends Component {\n  constructor(props) {\n    super(props);\n    this.height = 400;\n    this.padding  = 50;\n    this.width= 400;\n    this.scalesInstance = Scales(this.width, this.height, this.padding, this.props.data);\n    this.colors = [`aqua`, `red`, `green`];\n    this.datasets = this.getDataInfo();\n    this.state = {\n      degree: 3,\n      dataVisualisations: []\n    }\n  }\n\n  /**\n   * @return {object}\n   */\n  getDataInfo() {\n    const info = {}\n\n    Object.keys(this.props.data).forEach((key, i) => {\n      info[key] = {\n        color: this.colors[i],\n        data: this.props.data[key],\n        name: key\n      };\n    });\n    return info;\n  }\n\n  onClick() {\n    const dataVisualisations = [];\n\n    Object.keys(this.props.datasets).forEach((key) => {\n      if (document.querySelector(`[data-name=${key}]`).length > 0) {\n        const dataVis = <Regression key={`regression-${key}`} data={this.datasets[key]}\n        scalesInstance={this.scalesInstance} degree={this.state.degree} />;\n\n        dataVisualisations.push(dataVis);\n      }\n    })\n\n    this.setState({dataVisualisations});\n  }\n\n  onChange(event) {\n    this.setState({degree: event.target.value})\n  }\n\n  render() {\n    return (\n      <div className=\"scatterplot\">\n        <svg width={this.width} height={this.height} style={{background: \"grey\"}}>\n          <Axis scale={this.xScale} dimension=\"x\" height={this.height} padding={this.padding}\n            scalesInstance={this.scalesInstance} />\n          <Axis scale={this.yScale} dimension=\"y\" height={this.height} padding={this.padding}\n            scalesInstance={this.scalesInstance} />\n          <Legend datasets={this.datasets} scalesInstance={this.scalesInstance} />\n        </svg>\n      </div>\n    );\n  }\n}\n\nexport default ScatterPlot;"]},"metadata":{},"sourceType":"module"}