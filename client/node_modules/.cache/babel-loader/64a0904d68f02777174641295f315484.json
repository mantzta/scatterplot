{"ast":null,"code":"import _classCallCheck from \"/Users/tamara/Documents/scatterplot/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tamara/Documents/scatterplot/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/tamara/Documents/scatterplot/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/tamara/Documents/scatterplot/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/tamara/Documents/scatterplot/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/tamara/Documents/scatterplot/client/src/App/Legend/Legend.js\";\nimport React, { Component } from \"react\";\nimport memoize from \"memoize-one\";\nimport * as d3 from \"d3\";\nimport DataVisualisation from \"../DataVisualisation/DataVisualisation\";\n\nvar Legend =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Legend, _Component);\n\n  function Legend(props) {\n    var _this;\n\n    _classCallCheck(this, Legend);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Legend).call(this, props));\n    _this.updateVisualisation = memoize(function (list, filterText) {\n      return list.filter(function (item) {\n        return item.text.includes(filterText);\n      });\n    });\n    _this.groupRef = React.createRef();\n    _this.xPos = 40;\n    _this.yPos = 20;\n    _this.state = {\n      shownData: [],\n      shownRegression: _this.props.shownRegression\n    };\n    return _this;\n  }\n\n  _createClass(Legend, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.drawLegend();\n    }\n    /**\n     * @param {string} key\n     */\n\n  }, {\n    key: \"onClick\",\n    value: function onClick(key) {\n      var group = d3.select(this.groupRef.current);\n      var data = group.select(\"[data-name=\".concat(key, \"]\"));\n      var shownData = this.state.shownData;\n      var shownRegression = this.state.shownRegression;\n\n      if (data.empty()) {\n        var dataVis = React.createElement(DataVisualisation, {\n          key: \"data-\".concat(key),\n          data: this.props.datasets[key].data,\n          scalesInstance: this.props.scalesInstance,\n          color: this.props.datasets[key].color,\n          name: this.props.datasets[key].name,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 32\n          },\n          __self: this\n        });\n        shownData.push(dataVis);\n      } else {\n        shownData = shownData.filter(function (d) {\n          return d.key.indexOf(key) === -1;\n        });\n        shownRegression = shownRegression.filter(function (r) {\n          return r.key.indexOf(key) === -1;\n        });\n      }\n\n      this.setState({\n        shownData: shownData,\n        shownRegression: shownRegression\n      });\n    }\n  }, {\n    key: \"drawLegend\",\n    value: function drawLegend() {\n      var _this2 = this;\n\n      var legend = d3.select(this.groupRef.current);\n      var x = this.xPos;\n      Object.keys(this.props.datasets).forEach(function (key) {\n        var g = legend.append(\"g\").on(\"click\", _this2.onClick.bind(_this2, key));\n        g.attr(\"class\", \"legend\").append(\"circle\").attr(\"cx\", x).attr(\"cy\", _this2.yPos).attr(\"r\", 10).attr(\"fill\", _this2.props.datasets[key].color);\n        g.append(\"text\").attr(\"x\", x + 15).attr(\"y\", _this2.yPos).text(key).attr(\"alignment-baseline\", \"middle\");\n        x += 100;\n      });\n    } // Re-run the filter whenever the list array or filter text changes:\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"g\", {\n        ref: this.groupRef,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, this.state.shownData.concat(this.state.shownRegression));\n    }\n  }]);\n\n  return Legend;\n}(Component);\n\nexport default Legend;","map":{"version":3,"sources":["/Users/tamara/Documents/scatterplot/client/src/App/Legend/Legend.js"],"names":["React","Component","memoize","d3","DataVisualisation","Legend","props","updateVisualisation","list","filterText","filter","item","text","includes","groupRef","createRef","xPos","yPos","state","shownData","shownRegression","drawLegend","key","group","select","current","data","empty","dataVis","datasets","scalesInstance","color","name","push","d","indexOf","r","setState","legend","x","Object","keys","forEach","g","append","on","onClick","bind","attr","concat"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport memoize from \"memoize-one\";\nimport * as d3 from \"d3\";\nimport DataVisualisation from \"../DataVisualisation/DataVisualisation\";\n\nclass Legend extends Component {\n  constructor(props) {\n    super(props);\n    this.groupRef = React.createRef();\n    this.xPos = 40;\n    this.yPos = 20;\n    this.state = {\n      shownData: [],\n      shownRegression: this.props.shownRegression\n    }\n  }\n\n  componentDidMount() {\n    this.drawLegend();\n  }\n\n  /**\n   * @param {string} key\n   */\n  onClick(key) {\n    const group = d3.select(this.groupRef.current);\n    const data = group.select(`[data-name=${key}]`);\n    let shownData = this.state.shownData;\n    let shownRegression = this.state.shownRegression;\n\n    if (data.empty()) {\n      const dataVis = <DataVisualisation key={`data-${key}`} data={this.props.datasets[key].data}\n      scalesInstance={this.props.scalesInstance} color={this.props.datasets[key].color}\n      name={this.props.datasets[key].name} />;\n\n      shownData.push(dataVis);\n    } else {\n      shownData = shownData.filter(d => {\n        return  d.key.indexOf(key) === -1;\n      });\n\n      shownRegression = shownRegression.filter(r => {\n        return  r.key.indexOf(key) === -1;\n      });\n    }\n\n    this.setState({\n      shownData,\n      shownRegression\n    })\n  }\n\n  drawLegend() {\n    const legend = d3.select(this.groupRef.current);\n    let x = this.xPos;\n\n    Object.keys(this.props.datasets).forEach((key) => {\n      const g = legend.append(`g`)\n        .on(`click`, this.onClick.bind(this, key));\n      g.attr(`class`, `legend`)\n        .append(`circle`)\n        .attr(`cx`, x)\n        .attr(`cy`, this.yPos)\n        .attr(`r`, 10)\n        .attr(`fill`, this.props.datasets[key].color);\n\n      g.append(`text`)\n        .attr(`x`, x + 15)\n        .attr(`y`, this.yPos)\n        .text(key)\n        .attr(`alignment-baseline`,`middle`);\n\n      x += 100;\n    });\n}\n\n// Re-run the filter whenever the list array or filter text changes:\nupdateVisualisation = memoize(\n  (list, filterText) => list.filter(item => item.text.includes(filterText))\n);\n\n  render() {\n    return (\n      <g ref={this.groupRef}>\n        {this.state.shownData.concat(this.state.shownRegression)}\n      </g>\n    );\n  }\n\n}\n\nexport default Legend;"]},"metadata":{},"sourceType":"module"}