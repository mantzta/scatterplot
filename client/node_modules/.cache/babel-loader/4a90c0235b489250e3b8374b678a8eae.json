{"ast":null,"code":"import _classCallCheck from \"/Users/tamara/Documents/scatterplot/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tamara/Documents/scatterplot/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/tamara/Documents/scatterplot/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/tamara/Documents/scatterplot/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/tamara/Documents/scatterplot/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/tamara/Documents/scatterplot/client/src/App/Axis/Axis.js\";\nimport React, { Component } from 'react';\nimport * as d3 from \"d3\";\n\nvar Axis =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Axis, _Component);\n\n  function Axis(props) {\n    _classCallCheck(this, Axis);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Axis).call(this, props));\n  }\n\n  _createClass(Axis, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.drawAxis();\n    }\n  }, {\n    key: \"drawAxis\",\n    value: function drawAxis() {\n      var axis, xTranslate, yTranslate;\n\n      if (this.props.type === \"x\") {\n        axis = d3.axisBottom(this.props.scale);\n        xTranslate = 0;\n        yTranslate = this.props.height - this.props.padding;\n      } else if (this.props.type === \"y\") {\n        axis = d3.axisLeft(this.props.scale);\n        xTranslate = this.props.padding;\n        yTranslate = 0;\n      }\n\n      axis.ticks(5);\n      d3.select(this.groupEl).attr(\"transform\", \"translate(\".concat(xTranslate, \", \").concat(yTranslate, \")\")).call(axis);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      return React.createElement(\"g\", {\n        ref: function ref(el) {\n          return _this.groupEl = el;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return Axis;\n}(Component);\n\nexport default Axis;","map":{"version":3,"sources":["/Users/tamara/Documents/scatterplot/client/src/App/Axis/Axis.js"],"names":["React","Component","d3","Axis","props","drawAxis","axis","xTranslate","yTranslate","type","axisBottom","scale","height","padding","axisLeft","ticks","select","groupEl","attr","call","el"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;;IAEMC,I;;;;;AACJ,gBAAYC,KAAZ,EAAmB;AAAA;;AAAA,6EACXA,KADW;AAElB;;;;wCAEmB;AAClB,WAAKC,QAAL;AACD;;;+BAEU;AACT,UAAIC,IAAJ,EAAUC,UAAV,EAAsBC,UAAtB;;AAEA,UAAI,KAAKJ,KAAL,CAAWK,IAAX,QAAJ,EAA6B;AAC3BH,QAAAA,IAAI,GAAGJ,EAAE,CAACQ,UAAH,CAAc,KAAKN,KAAL,CAAWO,KAAzB,CAAP;AACAJ,QAAAA,UAAU,GAAG,CAAb;AACAC,QAAAA,UAAU,GAAG,KAAKJ,KAAL,CAAWQ,MAAX,GAAoB,KAAKR,KAAL,CAAWS,OAA5C;AACD,OAJD,MAIO,IAAI,KAAKT,KAAL,CAAWK,IAAX,QAAJ,EAA6B;AAClCH,QAAAA,IAAI,GAAGJ,EAAE,CAACY,QAAH,CAAY,KAAKV,KAAL,CAAWO,KAAvB,CAAP;AACAJ,QAAAA,UAAU,GAAG,KAAKH,KAAL,CAAWS,OAAxB;AACAL,QAAAA,UAAU,GAAG,CAAb;AACD;;AAEDF,MAAAA,IAAI,CAACS,KAAL,CAAW,CAAX;AAEAb,MAAAA,EAAE,CAACc,MAAH,CAAU,KAAKC,OAAf,EACGC,IADH,kCACkCX,UADlC,eACiDC,UADjD,QAEGW,IAFH,CAEQb,IAFR;AAGD;;;6BAEQ;AAAA;;AACP,aACE;AAAG,QAAA,GAAG,EAAE,aAAAc,EAAE;AAAA,iBAAI,KAAI,CAACH,OAAL,GAAeG,EAAnB;AAAA,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAGD;;;;EAjCgBnB,S;;AAqCnB,eAAeE,IAAf","sourcesContent":["import React, { Component } from 'react';\nimport * as d3 from \"d3\";\n\nclass Axis extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    this.drawAxis()\n  }\n\n  drawAxis() {\n    let axis, xTranslate, yTranslate\n\n    if (this.props.type === `x`) {\n      axis = d3.axisBottom(this.props.scale)\n      xTranslate = 0\n      yTranslate = this.props.height - this.props.padding\n    } else if (this.props.type === `y`) {\n      axis = d3.axisLeft(this.props.scale)\n      xTranslate = this.props.padding\n      yTranslate = 0\n    }\n\n    axis.ticks(5);\n\n    d3.select(this.groupEl)\n      .attr(`transform`, `translate(${xTranslate}, ${yTranslate})`)\n      .call(axis);\n  }\n\n  render() {\n    return (\n      <g ref={el => this.groupEl = el}></g>\n    );\n  }\n\n}\n\nexport default Axis;"]},"metadata":{},"sourceType":"module"}