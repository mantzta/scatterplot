{"ast":null,"code":"import _classCallCheck from \"/Users/tamara/Documents/scatterplot/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tamara/Documents/scatterplot/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/tamara/Documents/scatterplot/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/tamara/Documents/scatterplot/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/tamara/Documents/scatterplot/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/tamara/Documents/scatterplot/client/src/App/Regression/Regression.js\";\nimport React, { Component } from 'react';\nimport * as d3 from \"d3\";\nimport regression from 'regression';\n\nvar Regression =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Regression, _Component);\n\n  /**\n   * @param {object} props\n   */\n  function Regression(props) {\n    var _this;\n\n    _classCallCheck(this, Regression);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Regression).call(this, props));\n    _this.pathRef = React.createRef();\n    _this.degree = 3;\n    return _this;\n  }\n\n  _createClass(Regression, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.drawRegression(this.props.data);\n    }\n    /**\n     * Regression library needs points as arrays within an array: [[p1, p2], ...]\n     * @param {array} dataset\n     */\n\n  }, {\n    key: \"getTransformedDataset\",\n    value: function getTransformedDataset(dataset) {\n      var transformedDataset = [];\n      dataset.forEach(function (pointObj) {\n        transformedDataset.push([pointObj.x, pointObj.y]);\n      });\n      return transformedDataset;\n    }\n    /**\n     *\n     * @param {array<object>} dataset\n     */\n\n  }, {\n    key: \"drawRegression\",\n    value: function drawRegression(dataset) {\n      var scales = this.props.scalesInstance.getScales();\n      var model = regression.polynomial(this.getTransformedDataset(dataset), {\n        order: this.degree\n      });\n      var lineGenerator = d3.line().x(function (d) {\n        return scales.x(d[0]);\n      }).y(function (d) {\n        return scales.y(d[1]);\n      }).curve(d3.curveBasis);\n      var pathData = lineGenerator(model.points);\n      d3.select(this.pathRef.current).attr(\"class\", \"line\").attr(\"d\", pathData).attr(\"stroke\", this.props.color).attr(\"fill\", \"none\");\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"path\", {\n        ref: this.pathRef,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return Regression;\n}(Component);\n\nexport default Regression;","map":{"version":3,"sources":["/Users/tamara/Documents/scatterplot/client/src/App/Regression/Regression.js"],"names":["React","Component","d3","regression","Regression","props","pathRef","createRef","degree","drawRegression","data","dataset","transformedDataset","forEach","pointObj","push","x","y","scales","scalesInstance","getScales","model","polynomial","getTransformedDataset","order","lineGenerator","line","d","curve","curveBasis","pathData","points","select","current","attr","color"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AACA,OAAOC,UAAP,MAAuB,YAAvB;;IAEMC,U;;;;;AACJ;;;AAGA,sBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,oFAAMA,KAAN;AACA,UAAKC,OAAL,GAAeN,KAAK,CAACO,SAAN,EAAf;AACA,UAAKC,MAAL,GAAc,CAAd;AAHiB;AAIlB;;;;wCAEmB;AAClB,WAAKC,cAAL,CAAoB,KAAKJ,KAAL,CAAWK,IAA/B;AACD;AAED;;;;;;;0CAIsBC,O,EAAS;AAC7B,UAAMC,kBAAkB,GAAG,EAA3B;AAEAD,MAAAA,OAAO,CAACE,OAAR,CAAgB,UAACC,QAAD,EAAc;AAC5BF,QAAAA,kBAAkB,CAACG,IAAnB,CAAwB,CAACD,QAAQ,CAACE,CAAV,EAAaF,QAAQ,CAACG,CAAtB,CAAxB;AACD,OAFD;AAIA,aAAOL,kBAAP;AACD;AAED;;;;;;;mCAIeD,O,EAAS;AACtB,UAAMO,MAAM,GAAG,KAAKb,KAAL,CAAWc,cAAX,CAA0BC,SAA1B,EAAf;AACA,UAAMC,KAAK,GAAGlB,UAAU,CAACmB,UAAX,CAAsB,KAAKC,qBAAL,CAA2BZ,OAA3B,CAAtB,EAA2D;AAAEa,QAAAA,KAAK,EAAE,KAAKhB;AAAd,OAA3D,CAAd;AAEA,UAAMiB,aAAa,GAAGvB,EAAE,CAACwB,IAAH,GACnBV,CADmB,CACjB,UAAUW,CAAV,EAAa;AACd,eAAOT,MAAM,CAACF,CAAP,CAASW,CAAC,CAAC,CAAD,CAAV,CAAP;AACD,OAHmB,EAInBV,CAJmB,CAIjB,UAAUU,CAAV,EAAa;AACd,eAAOT,MAAM,CAACD,CAAP,CAASU,CAAC,CAAC,CAAD,CAAV,CAAP;AACD,OANmB,EAOnBC,KAPmB,CAOb1B,EAAE,CAAC2B,UAPU,CAAtB;AASA,UAAMC,QAAQ,GAAGL,aAAa,CAACJ,KAAK,CAACU,MAAP,CAA9B;AAEA7B,MAAAA,EAAE,CAAC8B,MAAH,CAAU,KAAK1B,OAAL,CAAa2B,OAAvB,EACGC,IADH,CACQ,OADR,EACiB,MADjB,EAEGA,IAFH,CAEQ,GAFR,EAEaJ,QAFb,EAGGI,IAHH,CAGQ,QAHR,EAGkB,KAAK7B,KAAL,CAAW8B,KAH7B,EAIGD,IAJH,CAIQ,MAJR,EAIgB,MAJhB;AAKD;;;6BAEQ;AACP,aACE;AAAM,QAAA,GAAG,EAAE,KAAK5B,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAGD;;;;EA1DsBL,S;;AA8DzB,eAAeG,UAAf","sourcesContent":["import React, { Component } from 'react';\nimport * as d3 from \"d3\";\nimport regression from 'regression';\n\nclass Regression extends Component {\n  /**\n   * @param {object} props\n   */\n  constructor(props) {\n    super(props);\n    this.pathRef = React.createRef();\n    this.degree = 3;\n  }\n\n  componentDidMount() {\n    this.drawRegression(this.props.data);\n  }\n\n  /**\n   * Regression library needs points as arrays within an array: [[p1, p2], ...]\n   * @param {array} dataset\n   */\n  getTransformedDataset(dataset) {\n    const transformedDataset = [];\n\n    dataset.forEach((pointObj) => {\n      transformedDataset.push([pointObj.x, pointObj.y]);\n    })\n\n    return transformedDataset;\n  }\n\n  /**\n   *\n   * @param {array<object>} dataset\n   */\n  drawRegression(dataset) {\n    const scales = this.props.scalesInstance.getScales();\n    const model = regression.polynomial(this.getTransformedDataset(dataset), { order: this.degree });\n\n    const lineGenerator = d3.line()\n      .x(function (d) {\n        return scales.x(d[0]);\n      })\n      .y(function (d) {\n        return scales.y(d[1]);\n      })\n      .curve(d3.curveBasis);\n\n    const pathData = lineGenerator(model.points);\n\n    d3.select(this.pathRef.current)\n      .attr(\"class\", \"line\")\n      .attr(\"d\", pathData)\n      .attr(\"stroke\", this.props.color)\n      .attr(\"fill\", \"none\");\n  }\n\n  render() {\n    return (\n      <path ref={this.pathRef}></path>\n    );\n  }\n\n}\n\nexport default Regression;"]},"metadata":{},"sourceType":"module"}