{"ast":null,"code":"import _classCallCheck from \"/Users/tamara/Documents/scatterplot/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tamara/Documents/scatterplot/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/tamara/Documents/scatterplot/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/tamara/Documents/scatterplot/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/tamara/Documents/scatterplot/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/tamara/Documents/scatterplot/client/src/App/Regression/Regression.js\";\nimport React, { Component } from 'react';\nimport * as d3 from \"d3\";\nimport regression from 'regression';\n\nvar Regression =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Regression, _Component);\n\n  function Regression(props) {\n    var _this;\n\n    _classCallCheck(this, Regression);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Regression).call(this, props));\n    _this.pathRef = React.createRef();\n    _this.degree = 3;\n    return _this;\n  }\n\n  _createClass(Regression, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.drawRegression(this.props.data);\n    }\n  }, {\n    key: \"predictY\",\n    value: function predictY(coefficients, x) {\n      var y = 0;\n\n      for (var i = 0; i < coefficients.length; i++) {\n        y += Math.pow(x, i) * coefficients[i];\n      }\n\n      return y;\n    }\n  }, {\n    key: \"getTransformedDataset\",\n    value: function getTransformedDataset(dataset) {\n      var transformedDataset = [];\n      dataset.forEach(function (pointObj) {\n        transformedDataset.push([pointObj.x, pointObj.y]);\n      });\n      return transformedDataset;\n    }\n  }, {\n    key: \"drawRegression\",\n    value: function drawRegression(dataset) {\n      var xScale = d3.scaleLinear().domain([0, this.props.maxX]).range([this.props.padding, this.props.width - this.props.padding]);\n      var yScale = d3.scaleLinear().domain([0, this.props.maxY]).range([this.props.height - this.props.padding, this.props.padding]);\n      var model = regression.polynomial(this.getTransformedDataset(dataset), {\n        order: this.degree\n      });\n      /* eslint-disable no-console */\n\n      console.log(model);\n      var lineGenerator = d3.line().x(function (d) {\n        return xScale(d[0]);\n      }).y(function (d) {\n        return yScale(Math.round(d[1]));\n      }).curve(d3.curveBasis);\n      var pathData = lineGenerator(model.points);\n      d3.select(this.pathRef.current).attr(\"class\", \"line\").attr(\"d\", pathData);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"path\", {\n        ref: this.pathRef,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return Regression;\n}(Component);\n\nexport default Regression;","map":{"version":3,"sources":["/Users/tamara/Documents/scatterplot/client/src/App/Regression/Regression.js"],"names":["React","Component","d3","regression","Regression","props","pathRef","createRef","degree","drawRegression","data","coefficients","x","y","i","length","Math","pow","dataset","transformedDataset","forEach","pointObj","push","xScale","scaleLinear","domain","maxX","range","padding","width","yScale","maxY","height","model","polynomial","getTransformedDataset","order","console","log","lineGenerator","line","d","round","curve","curveBasis","pathData","points","select","current","attr"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AACA,OAAOC,UAAP,MAAuB,YAAvB;;IAEMC,U;;;;;AACJ,sBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,oFAAMA,KAAN;AACA,UAAKC,OAAL,GAAeN,KAAK,CAACO,SAAN,EAAf;AACA,UAAKC,MAAL,GAAc,CAAd;AAHiB;AAIlB;;;;wCAEmB;AAClB,WAAKC,cAAL,CAAoB,KAAKJ,KAAL,CAAWK,IAA/B;AACD;;;6BAEQC,Y,EAAcC,C,EAAG;AACxB,UAAIC,CAAC,GAAG,CAAR;;AAEA,WAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGH,YAAY,CAACI,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AAC3CD,QAAAA,CAAC,IAAIG,IAAI,CAACC,GAAL,CAASL,CAAT,EAAYE,CAAZ,IAAiBH,YAAY,CAACG,CAAD,CAAlC;AACD;;AAED,aAAOD,CAAP;AACD;;;0CAEqBK,O,EAAS;AAC7B,UAAMC,kBAAkB,GAAG,EAA3B;AAEAD,MAAAA,OAAO,CAACE,OAAR,CAAgB,UAACC,QAAD,EAAc;AAC5BF,QAAAA,kBAAkB,CAACG,IAAnB,CAAwB,CAACD,QAAQ,CAACT,CAAV,EAAaS,QAAQ,CAACR,CAAtB,CAAxB;AACD,OAFD;AAIA,aAAOM,kBAAP;AACD;;;mCAEcD,O,EAAS;AACtB,UAAIK,MAAM,GAAGrB,EAAE,CAACsB,WAAH,GACVC,MADU,CACH,CAAC,CAAD,EAAI,KAAKpB,KAAL,CAAWqB,IAAf,CADG,EAEVC,KAFU,CAEJ,CAAC,KAAKtB,KAAL,CAAWuB,OAAZ,EAAqB,KAAKvB,KAAL,CAAWwB,KAAX,GAAmB,KAAKxB,KAAL,CAAWuB,OAAnD,CAFI,CAAb;AAGA,UAAIE,MAAM,GAAG5B,EAAE,CAACsB,WAAH,GACVC,MADU,CACH,CAAC,CAAD,EAAI,KAAKpB,KAAL,CAAW0B,IAAf,CADG,EAEVJ,KAFU,CAEJ,CAAC,KAAKtB,KAAL,CAAW2B,MAAX,GAAoB,KAAK3B,KAAL,CAAWuB,OAAhC,EAAyC,KAAKvB,KAAL,CAAWuB,OAApD,CAFI,CAAb;AAIA,UAAMK,KAAK,GAAG9B,UAAU,CAAC+B,UAAX,CAAsB,KAAKC,qBAAL,CAA2BjB,OAA3B,CAAtB,EAA2D;AAAEkB,QAAAA,KAAK,EAAE,KAAK5B;AAAd,OAA3D,CAAd;AACA;;AACA6B,MAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ;AACA,UAAMM,aAAa,GAAGrC,EAAE,CAACsC,IAAH,GACnB5B,CADmB,CACjB,UAAU6B,CAAV,EAAa;AACd,eAAOlB,MAAM,CAACkB,CAAC,CAAC,CAAD,CAAF,CAAb;AACD,OAHmB,EAInB5B,CAJmB,CAIjB,UAAU4B,CAAV,EAAa;AACd,eAAOX,MAAM,CAACd,IAAI,CAAC0B,KAAL,CAAWD,CAAC,CAAC,CAAD,CAAZ,CAAD,CAAb;AACD,OANmB,EAOnBE,KAPmB,CAObzC,EAAE,CAAC0C,UAPU,CAAtB;AASA,UAAMC,QAAQ,GAAGN,aAAa,CAACN,KAAK,CAACa,MAAP,CAA9B;AAEA5C,MAAAA,EAAE,CAAC6C,MAAH,CAAU,KAAKzC,OAAL,CAAa0C,OAAvB,EACGC,IADH,CACQ,OADR,EACiB,MADjB,EAEGA,IAFH,CAEQ,GAFR,EAEaJ,QAFb;AAGD;;;6BAEQ;AACP,aACE;AAAM,QAAA,GAAG,EAAE,KAAKvC,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAGD;;;;EA9DsBL,S;;AAkEzB,eAAeG,UAAf","sourcesContent":["import React, { Component } from 'react';\nimport * as d3 from \"d3\";\nimport regression from 'regression';\n\nclass Regression extends Component {\n  constructor(props) {\n    super(props);\n    this.pathRef = React.createRef();\n    this.degree = 3;\n  }\n\n  componentDidMount() {\n    this.drawRegression(this.props.data)\n  }\n\n  predictY(coefficients, x) {\n    let y = 0\n\n    for(let i = 0; i < coefficients.length; i++) {\n      y += Math.pow(x, i) * coefficients[i]\n    }\n\n    return y\n  }\n\n  getTransformedDataset(dataset) {\n    const transformedDataset = []\n\n    dataset.forEach((pointObj) => {\n      transformedDataset.push([pointObj.x, pointObj.y])\n    })\n\n    return transformedDataset\n  }\n\n  drawRegression(dataset) {\n    let xScale = d3.scaleLinear()\n      .domain([0, this.props.maxX])\n      .range([this.props.padding, this.props.width - this.props.padding]);\n    let yScale = d3.scaleLinear()\n      .domain([0, this.props.maxY])\n      .range([this.props.height - this.props.padding, this.props.padding]);\n\n    const model = regression.polynomial(this.getTransformedDataset(dataset), { order: this.degree });\n    /* eslint-disable no-console */\n    console.log(model)\n    const lineGenerator = d3.line()\n      .x(function (d) {\n        return xScale(d[0]);\n      })\n      .y(function (d) {\n        return yScale(Math.round(d[1]));\n      })\n      .curve(d3.curveBasis);\n\n    const pathData = lineGenerator(model.points);\n\n    d3.select(this.pathRef.current)\n      .attr(\"class\", \"line\")\n      .attr(\"d\", pathData);\n  }\n\n  render() {\n    return (\n      <path ref={this.pathRef}></path>\n    );\n  }\n\n}\n\nexport default Regression;"]},"metadata":{},"sourceType":"module"}