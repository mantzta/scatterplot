{"ast":null,"code":"import _classCallCheck from \"/Users/tamara/Documents/scatterplot/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tamara/Documents/scatterplot/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/tamara/Documents/scatterplot/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/tamara/Documents/scatterplot/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/tamara/Documents/scatterplot/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/tamara/Documents/scatterplot/client/src/App/ScatterPlot/ScatterPlot.js\";\nimport React, { Component } from 'react';\nimport * as d3 from \"d3\";\nimport Axis from \"../Axis/Axis\";\nimport DataVis from \"../DataVis/DataVis\";\nimport Regression from \"../Regression/Regression\";\n\nvar ScatterPlot =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ScatterPlot, _Component);\n\n  function ScatterPlot(props) {\n    var _this;\n\n    _classCallCheck(this, ScatterPlot);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ScatterPlot).call(this, props));\n    _this.height = 400;\n    _this.padding = 30;\n    _this.width = 400;\n    _this.xScale = _this.getScale(_this.padding, _this.width - _this.padding, _this.getMax(\"x\", _this.props.data));\n    _this.yScale = _this.getScale(_this.height - _this.padding, _this.padding, _this.getMax(\"y\", _this.props.data));\n    _this.svgRef = React.createRef();\n    _this.svgEl = _this.svgRef.current;\n    _this.svg = d3.select(_this.svgEl);\n    return _this;\n  }\n\n  _createClass(ScatterPlot, [{\n    key: \"getScale\",\n    value: function getScale(rangeStart, rangeEnd, max) {\n      return d3.scaleLinear().domain([0, max]).range([rangeStart, rangeEnd]);\n    }\n  }, {\n    key: \"getMax\",\n    value: function getMax(dimension, data) {\n      var max = [];\n      Array.from(data).forEach(function (set) {\n        max.push(d3.max(set, function (d) {\n          return d[dimension];\n        }));\n      });\n      return Math.max.apply(Math, max);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"svg\", {\n        width: this.width,\n        height: this.height,\n        ref: this.svgRef,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, React.createElement(Axis, {\n        scale: this.state.xScale,\n        type: \"x\",\n        height: this.height,\n        padding: this.padding,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }), React.createElement(Axis, {\n        scale: this.state.yScale,\n        type: \"y\",\n        height: this.height,\n        padding: this.padding,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }), React.createElement(DataVis, {\n        data: this.props.data.dataset1,\n        scales: {\n          x: this.xScale,\n          y: this.yScale\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }), React.createElement(DataVis, {\n        data: this.props.data.dataset2,\n        scales: {\n          x: this.xScale,\n          y: this.yScale\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }), React.createElement(DataVis, {\n        data: this.props.data.dataset3,\n        scales: {\n          x: this.xScale,\n          y: this.yScale\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }), React.createElement(Regression, {\n        data: this.props.data.dataset1,\n        scales: {\n          x: this.xScale,\n          y: this.yScale\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }), React.createElement(Regression, {\n        data: this.props.data.dataset2,\n        scales: {\n          x: this.xScale,\n          y: this.yScale\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }), React.createElement(Regression, {\n        data: this.props.data.dataset3,\n        scales: {\n          x: this.xScale,\n          y: this.yScale\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return ScatterPlot;\n}(Component);\n\nexport default ScatterPlot;","map":{"version":3,"sources":["/Users/tamara/Documents/scatterplot/client/src/App/ScatterPlot/ScatterPlot.js"],"names":["React","Component","d3","Axis","DataVis","Regression","ScatterPlot","props","height","padding","width","xScale","getScale","getMax","data","yScale","svgRef","createRef","svgEl","current","svg","select","rangeStart","rangeEnd","max","scaleLinear","domain","range","dimension","Array","from","forEach","set","push","d","Math","state","dataset1","x","y","dataset2","dataset3"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport * as d3 from \"d3\";\nimport Axis from \"../Axis/Axis\"\nimport DataVis from \"../DataVis/DataVis\"\nimport Regression from \"../Regression/Regression\"\n\nclass ScatterPlot extends Component {\n  constructor(props) {\n    super(props);\n    this.height = 400;\n    this.padding  = 30;\n    this.width= 400;\n    this.xScale = this.getScale(\n      this.padding,\n      this.width - this.padding,\n      this.getMax(`x`, this.props.data)\n    );\n    this.yScale = this.getScale(\n      this.height - this.padding,\n      this.padding,\n      this.getMax(`y`, this.props.data)\n    );\n\n    this.svgRef = React.createRef();\n    this.svgEl = this.svgRef.current;\n    this.svg = d3.select(this.svgEl);\n  }\n\n  getScale(rangeStart, rangeEnd, max) {\n    return d3.scaleLinear()\n      .domain([0, max])\n      .range([rangeStart, rangeEnd]);\n  }\n\n  getMax(dimension, data) {\n    const max = []\n\n    Array.from(data).forEach(set => {\n      max.push(d3.max(set, function(d) { return d[dimension]; }))\n    });\n    return Math.max(...max)\n  }\n\n  render() {\n    return (\n      <svg width={this.width} height={this.height} ref={this.svgRef}>\n        <Axis scale={this.state.xScale} type=\"x\" height={this.height} padding={this.padding} />\n        <Axis scale={this.state.yScale} type=\"y\" height={this.height} padding={this.padding} />\n        <DataVis data={this.props.data.dataset1} scales={ {x: this.xScale, y: this.yScale} } />\n        <DataVis data={this.props.data.dataset2} scales={ {x: this.xScale, y: this.yScale} } />\n        <DataVis data={this.props.data.dataset3} scales={ {x: this.xScale, y: this.yScale} } />\n        <Regression data={this.props.data.dataset1} scales={ {x: this.xScale, y: this.yScale} } />\n        <Regression data={this.props.data.dataset2} scales={ {x: this.xScale, y: this.yScale} } />\n        <Regression data={this.props.data.dataset3} scales={ {x: this.xScale, y: this.yScale} } />\n      </svg>\n    );\n  }\n}\n\nexport default ScatterPlot;"]},"metadata":{},"sourceType":"module"}