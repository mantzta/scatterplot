{"ast":null,"code":"import _classCallCheck from \"/Users/tamara/Documents/scatterplot/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tamara/Documents/scatterplot/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/tamara/Documents/scatterplot/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/tamara/Documents/scatterplot/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/tamara/Documents/scatterplot/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/tamara/Documents/scatterplot/client/src/App/Regression/Regression.js\";\nimport React, { Component } from 'react';\nimport * as d3 from \"d3\";\nimport regression from 'regression';\n\nvar Regression =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Regression, _Component);\n\n  function Regression(props) {\n    var _this;\n\n    _classCallCheck(this, Regression);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Regression).call(this, props));\n    _this.pathRef = React.createRef();\n    _this.degree = 2;\n    return _this;\n  }\n\n  _createClass(Regression, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.drawRegression(this.props.data);\n    }\n  }, {\n    key: \"getTransformedDataset\",\n    value: function getTransformedDataset(dataset) {\n      var transformedDataset = [];\n      dataset.forEach(function (pointObj) {\n        transformedDataset.push([pointObj.x, pointObj.y]);\n      });\n      return transformedDataset;\n    }\n    /**\n     * Regression should stay within graph\n     */\n\n  }, {\n    key: \"restrictArea\",\n    value: function restrictArea(points) {\n      var newPoints = [];\n      points.forEach(function (point) {\n        if (point[1] <= 100) {\n          newPoints.push(point);\n        }\n      });\n    }\n  }, {\n    key: \"drawRegression\",\n    value: function drawRegression(dataset) {\n      var xScale = d3.scaleLinear().domain([0, this.props.maxX]).range([this.props.padding, this.props.width - this.props.padding]);\n      var yScale = d3.scaleLinear().domain([0, this.props.maxY]).range([this.props.height - this.props.padding, this.props.padding]);\n      var model = regression.polynomial(this.getTransformedDataset(dataset), {\n        order: this.degree\n      });\n      /* eslint-disable no-console */\n\n      console.log(model);\n      var lineGenerator = d3.line().x(function (d) {\n        return xScale(d[0]);\n      }).y(function (d) {\n        return yScale(d[1]);\n      }).curve(d3.curveBasis);\n      var pathData = lineGenerator(model.points);\n      d3.select(this.pathRef.current).attr(\"class\", \"line\").attr(\"d\", pathData).attr(\"stroke\", \"black\").attr(\"fill\", \"none\");\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"path\", {\n        ref: this.pathRef,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return Regression;\n}(Component);\n\nexport default Regression;","map":{"version":3,"sources":["/Users/tamara/Documents/scatterplot/client/src/App/Regression/Regression.js"],"names":["React","Component","d3","regression","Regression","props","pathRef","createRef","degree","drawRegression","data","dataset","transformedDataset","forEach","pointObj","push","x","y","points","newPoints","point","xScale","scaleLinear","domain","maxX","range","padding","width","yScale","maxY","height","model","polynomial","getTransformedDataset","order","console","log","lineGenerator","line","d","curve","curveBasis","pathData","select","current","attr"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport * as d3 from \"d3\";\nimport regression from 'regression';\n\nclass Regression extends Component {\n  constructor(props) {\n    super(props);\n    this.pathRef = React.createRef();\n    this.degree = 2;\n  }\n\n  componentDidMount() {\n    this.drawRegression(this.props.data);\n  }\n\n  getTransformedDataset(dataset) {\n    const transformedDataset = [];\n\n    dataset.forEach((pointObj) => {\n      transformedDataset.push([pointObj.x, pointObj.y]);\n    })\n\n    return transformedDataset;\n  }\n\n  /**\n   * Regression should stay within graph\n   */\n  restrictArea(points) {\n    const newPoints = [];\n\n    points.forEach((point) => {\n      if (point[1] <= 100) {\n        newPoints.push(point);\n      }\n    })\n  }\n\n  drawRegression(dataset) {\n    let xScale = d3.scaleLinear()\n      .domain([0, this.props.maxX])\n      .range([this.props.padding, this.props.width - this.props.padding]);\n    let yScale = d3.scaleLinear()\n      .domain([0, this.props.maxY])\n      .range([this.props.height - this.props.padding, this.props.padding]);\n\n    const model = regression.polynomial(this.getTransformedDataset(dataset), { order: this.degree });\n    /* eslint-disable no-console */\n    console.log(model)\n\n    const lineGenerator = d3.line()\n      .x(function (d) {\n        return xScale(d[0]);\n      })\n      .y(function (d) {\n        return yScale(d[1]);\n      })\n      .curve(d3.curveBasis);\n\n    const pathData = lineGenerator(model.points);\n\n    d3.select(this.pathRef.current)\n      .attr(\"class\", \"line\")\n      .attr(\"d\", pathData)\n      .attr(\"stroke\", \"black\")\n      .attr(\"fill\", \"none\");\n  }\n\n  render() {\n    return (\n      <path ref={this.pathRef}></path>\n    );\n  }\n\n}\n\nexport default Regression;"]},"metadata":{},"sourceType":"module"}