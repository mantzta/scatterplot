{"ast":null,"code":"import _classCallCheck from \"/Users/tamara/Documents/scatterplot/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tamara/Documents/scatterplot/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/tamara/Documents/scatterplot/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/tamara/Documents/scatterplot/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/tamara/Documents/scatterplot/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/tamara/Documents/scatterplot/client/src/App/Legend/Legend.js\";\nimport React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport DataVisualisation from \"../DataVisualisation/DataVisualisation\";\n\nvar Legend =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Legend, _Component);\n\n  function Legend(props) {\n    var _this;\n\n    _classCallCheck(this, Legend);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Legend).call(this, props));\n    _this.groupRef = React.createRef();\n    _this.xPos = 40;\n    _this.yPos = 20;\n    _this.state = {\n      shownData: [],\n      shownRegression: []\n    };\n    return _this;\n  }\n\n  _createClass(Legend, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.drawLegend();\n    }\n    /**\n     * @param {string} key\n     */\n\n  }, {\n    key: \"onClick\",\n    value: function onClick(key) {\n      var group = d3.select(this.groupRef.current);\n      var data = group.select(\"[data-name=\".concat(key, \"]\"));\n      var shownData = this.state.shownData;\n      var shownRegression = this.state.shownRegression.length > 0 ? this.state.shownRegression : this.props.shownRegression;\n\n      if (data.empty()) {\n        var dataVis = React.createElement(DataVisualisation, {\n          key: \"data-\".concat(key),\n          data: this.props.datasets[key].data,\n          scalesInstance: this.props.scalesInstance,\n          color: this.props.datasets[key].color,\n          name: this.props.datasets[key].name,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 31\n          },\n          __self: this\n        });\n        shownData.push(dataVis);\n      } else {\n        shownData = shownData.filter(function (d) {\n          return d.key.indexOf(key) === -1;\n        });\n        shownRegression = shownRegression.filter(function (r) {\n          return r.key.indexOf(key) === -1;\n        });\n      }\n\n      this.setState({\n        shownData: shownData,\n        shownRegression: shownRegression\n      });\n    }\n  }, {\n    key: \"drawLegend\",\n    value: function drawLegend() {\n      var _this2 = this;\n\n      var legend = d3.select(this.groupRef.current);\n      var x = this.xPos;\n      Object.keys(this.props.datasets).forEach(function (key) {\n        var g = legend.append(\"g\").on(\"click\", _this2.onClick.bind(_this2, key));\n        g.attr(\"class\", \"legend\").append(\"circle\").attr(\"cx\", x).attr(\"cy\", _this2.yPos).attr(\"r\", 10).attr(\"fill\", _this2.props.datasets[key].color);\n        g.append(\"text\").attr(\"x\", x + 15).attr(\"y\", _this2.yPos).text(key).attr(\"alignment-baseline\", \"middle\");\n        x += 100;\n      });\n    }\n  }, {\n    key: \"setRegressionState\",\n    value: function setRegressionState(shownRegression) {\n      this.setState({\n        shownRegression: shownRegression\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.props.shownRegression.length > 0) {\n        this.setRegressionState(this.props.shownRegression);\n      }\n\n      return React.createElement(\"g\", {\n        ref: this.groupRef,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, this.state.shownData.concat(this.state.shownRegression));\n    }\n  }]);\n\n  return Legend;\n}(Component);\n\nexport default Legend;","map":{"version":3,"sources":["/Users/tamara/Documents/scatterplot/client/src/App/Legend/Legend.js"],"names":["React","Component","d3","DataVisualisation","Legend","props","groupRef","createRef","xPos","yPos","state","shownData","shownRegression","drawLegend","key","group","select","current","data","length","empty","dataVis","datasets","scalesInstance","color","name","push","filter","d","indexOf","r","setState","legend","x","Object","keys","forEach","g","append","on","onClick","bind","attr","text","setRegressionState","concat"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport DataVisualisation from \"../DataVisualisation/DataVisualisation\";\n\nclass Legend extends Component {\n  constructor(props) {\n    super(props);\n    this.groupRef = React.createRef();\n    this.xPos = 40;\n    this.yPos = 20;\n    this.state = {\n      shownData: [],\n      shownRegression: []\n    }\n  }\n\n  componentDidMount() {\n    this.drawLegend();\n  }\n\n  /**\n   * @param {string} key\n   */\n  onClick(key) {\n    const group = d3.select(this.groupRef.current);\n    const data = group.select(`[data-name=${key}]`);\n    let shownData = this.state.shownData;\n    let shownRegression = this.state.shownRegression.length > 0 ? this.state.shownRegression: this.props.shownRegression;\n\n    if (data.empty()) {\n      const dataVis = <DataVisualisation key={`data-${key}`} data={this.props.datasets[key].data}\n      scalesInstance={this.props.scalesInstance} color={this.props.datasets[key].color}\n      name={this.props.datasets[key].name} />;\n\n      shownData.push(dataVis);\n    } else {\n      shownData = shownData.filter(d => {\n        return  d.key.indexOf(key) === -1;\n      });\n\n      shownRegression = shownRegression.filter(r => {\n        return  r.key.indexOf(key) === -1;\n      });\n    }\n\n    this.setState({\n      shownData,\n      shownRegression\n    })\n  }\n\n  drawLegend() {\n    const legend = d3.select(this.groupRef.current);\n    let x = this.xPos;\n\n    Object.keys(this.props.datasets).forEach((key) => {\n      const g = legend.append(`g`)\n        .on(`click`, this.onClick.bind(this, key));\n      g.attr(`class`, `legend`)\n        .append(`circle`)\n        .attr(`cx`, x)\n        .attr(`cy`, this.yPos)\n        .attr(`r`, 10)\n        .attr(`fill`, this.props.datasets[key].color);\n\n      g.append(`text`)\n        .attr(`x`, x + 15)\n        .attr(`y`, this.yPos)\n        .text(key)\n        .attr(`alignment-baseline`,`middle`);\n\n      x += 100;\n    });\n  }\n\n  setRegressionState(shownRegression) {\n    this.setState({\n      shownRegression\n    })\n  }\n\n  render() {\n    if (this.props.shownRegression.length > 0) {\n      this.setRegressionState(this.props.shownRegression)\n    }\n\n    return (\n      <g ref={this.groupRef}>\n        {this.state.shownData.concat(this.state.shownRegression)}\n      </g>\n    );\n  }\n\n}\n\nexport default Legend;"]},"metadata":{},"sourceType":"module"}