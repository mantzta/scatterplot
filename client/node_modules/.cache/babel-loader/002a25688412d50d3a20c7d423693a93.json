{"ast":null,"code":"import _classCallCheck from \"/Users/tamara/Documents/scatterplot/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tamara/Documents/scatterplot/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/tamara/Documents/scatterplot/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/tamara/Documents/scatterplot/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/tamara/Documents/scatterplot/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/tamara/Documents/scatterplot/client/src/App/Regression/Regression.js\";\nimport React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport regression from \"regression\";\n\nvar Regression =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Regression, _Component);\n\n  function Regression(props) {\n    var _this;\n\n    _classCallCheck(this, Regression);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Regression).call(this, props));\n    _this.pathRef = React.createRef();\n    _this.degree = 3;\n    return _this;\n  }\n\n  _createClass(Regression, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.drawRegression();\n    }\n    /**\n     * Regression library needs coordinates as arrays within an array: [[x1, y2], ...].\n     * This transforms the dataset in order to calculate regression line.\n     * @param {array} dataset\n     * @return {Array<array>}\n     */\n\n  }, {\n    key: \"getTransformedDataset\",\n    value: function getTransformedDataset(dataset) {\n      var transformedDataset = [];\n      dataset.forEach(function (pointObj) {\n        transformedDataset.push([pointObj.x, pointObj.y]);\n      });\n      return transformedDataset;\n    }\n  }, {\n    key: \"drawRegression\",\n    value: function drawRegression() {\n      var scales = this.props.scalesInstance.getScales();\n      var model = regression.polynomial(this.getTransformedDataset(this.props.data.data), {\n        order: this.degree\n      });\n      var lineGenerator = d3.line().x(function (d) {\n        return scales.x(d[0]);\n      }).y(function (d) {\n        return scales.y(d[1]);\n      }).curve(d3.curveBasis);\n      var pathData = lineGenerator(model.points);\n      d3.select(this.pathRef.current).attr(\"d\", pathData).attr(\"stroke\", this.props.data.color).attr(\"fill\", \"none\");\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"path\", {\n        ref: this.pathRef,\n        className: \"regression__\".concat(this.props.data.name),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return Regression;\n}(Component);\n\nexport default Regression;","map":{"version":3,"sources":["/Users/tamara/Documents/scatterplot/client/src/App/Regression/Regression.js"],"names":["React","Component","d3","regression","Regression","props","pathRef","createRef","degree","drawRegression","dataset","transformedDataset","forEach","pointObj","push","x","y","scales","scalesInstance","getScales","model","polynomial","getTransformedDataset","data","order","lineGenerator","line","d","curve","curveBasis","pathData","points","select","current","attr","color","name"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AACA,OAAOC,UAAP,MAAuB,YAAvB;;IAEMC,U;;;;;AACJ,sBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,oFAAMA,KAAN;AACA,UAAKC,OAAL,GAAeN,KAAK,CAACO,SAAN,EAAf;AACA,UAAKC,MAAL,GAAc,CAAd;AAHiB;AAIlB;;;;wCAEmB;AAClB,WAAKC,cAAL;AACD;AAED;;;;;;;;;0CAMsBC,O,EAAS;AAC7B,UAAMC,kBAAkB,GAAG,EAA3B;AAEAD,MAAAA,OAAO,CAACE,OAAR,CAAgB,UAACC,QAAD,EAAc;AAC5BF,QAAAA,kBAAkB,CAACG,IAAnB,CAAwB,CAACD,QAAQ,CAACE,CAAV,EAAaF,QAAQ,CAACG,CAAtB,CAAxB;AACD,OAFD;AAIA,aAAOL,kBAAP;AACD;;;qCAEgB;AACf,UAAMM,MAAM,GAAG,KAAKZ,KAAL,CAAWa,cAAX,CAA0BC,SAA1B,EAAf;AACA,UAAMC,KAAK,GAAGjB,UAAU,CAACkB,UAAX,CAAsB,KAAKC,qBAAL,CAA2B,KAAKjB,KAAL,CAAWkB,IAAX,CAAgBA,IAA3C,CAAtB,EAAwE;AAAEC,QAAAA,KAAK,EAAE,KAAKhB;AAAd,OAAxE,CAAd;AAEA,UAAMiB,aAAa,GAAGvB,EAAE,CAACwB,IAAH,GACnBX,CADmB,CACjB,UAAUY,CAAV,EAAa;AACd,eAAOV,MAAM,CAACF,CAAP,CAASY,CAAC,CAAC,CAAD,CAAV,CAAP;AACD,OAHmB,EAInBX,CAJmB,CAIjB,UAAUW,CAAV,EAAa;AACd,eAAOV,MAAM,CAACD,CAAP,CAASW,CAAC,CAAC,CAAD,CAAV,CAAP;AACD,OANmB,EAOnBC,KAPmB,CAOb1B,EAAE,CAAC2B,UAPU,CAAtB;AASA,UAAMC,QAAQ,GAAGL,aAAa,CAACL,KAAK,CAACW,MAAP,CAA9B;AAEA7B,MAAAA,EAAE,CAAC8B,MAAH,CAAU,KAAK1B,OAAL,CAAa2B,OAAvB,EACGC,IADH,CACQ,GADR,EACaJ,QADb,EAEGI,IAFH,CAEQ,QAFR,EAEkB,KAAK7B,KAAL,CAAWkB,IAAX,CAAgBY,KAFlC,EAGGD,IAHH,CAGQ,MAHR,EAGgB,MAHhB;AAID;;;6BAEQ;AACP,aACE;AAAM,QAAA,GAAG,EAAE,KAAK5B,OAAhB;AAAyB,QAAA,SAAS,wBAAiB,KAAKD,KAAL,CAAWkB,IAAX,CAAgBa,IAAjC,CAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAGD;;;;EApDsBnC,S;;AAwDzB,eAAeG,UAAf","sourcesContent":["import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport regression from \"regression\";\n\nclass Regression extends Component {\n  constructor(props) {\n    super(props);\n    this.pathRef = React.createRef();\n    this.degree = 3;\n  }\n\n  componentDidMount() {\n    this.drawRegression();\n  }\n\n  /**\n   * Regression library needs coordinates as arrays within an array: [[x1, y2], ...].\n   * This transforms the dataset in order to calculate regression line.\n   * @param {array} dataset\n   * @return {Array<array>}\n   */\n  getTransformedDataset(dataset) {\n    const transformedDataset = [];\n\n    dataset.forEach((pointObj) => {\n      transformedDataset.push([pointObj.x, pointObj.y]);\n    })\n\n    return transformedDataset;\n  }\n\n  drawRegression() {\n    const scales = this.props.scalesInstance.getScales();\n    const model = regression.polynomial(this.getTransformedDataset(this.props.data.data), { order: this.degree });\n\n    const lineGenerator = d3.line()\n      .x(function (d) {\n        return scales.x(d[0]);\n      })\n      .y(function (d) {\n        return scales.y(d[1]);\n      })\n      .curve(d3.curveBasis);\n\n    const pathData = lineGenerator(model.points);\n\n    d3.select(this.pathRef.current)\n      .attr(\"d\", pathData)\n      .attr(\"stroke\", this.props.data.color)\n      .attr(\"fill\", \"none\");\n  }\n\n  render() {\n    return (\n      <path ref={this.pathRef} className={`regression__${this.props.data.name}`}></path>\n    );\n  }\n\n}\n\nexport default Regression;"]},"metadata":{},"sourceType":"module"}