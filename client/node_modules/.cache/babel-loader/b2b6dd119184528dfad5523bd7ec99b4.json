{"ast":null,"code":"import _classCallCheck from \"/Users/tamara/Documents/scatterplot/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tamara/Documents/scatterplot/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/tamara/Documents/scatterplot/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/tamara/Documents/scatterplot/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/tamara/Documents/scatterplot/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/tamara/Documents/scatterplot/client/src/App/Axis/Axis.js\";\nimport React, { Component } from 'react';\nimport * as d3 from \"d3\";\n\nvar Axis =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Axis, _Component);\n\n  function Axis(props) {\n    var _this;\n\n    _classCallCheck(this, Axis);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Axis).call(this, props));\n    _this.groupRef = React.createRef();\n    return _this;\n  }\n\n  _createClass(Axis, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.drawAxis();\n    }\n  }, {\n    key: \"drawAxis\",\n    value: function drawAxis() {\n      var scales = this.props.scalesInstance.getScales();\n\n      if (this.props.dimension === \"x\") {\n        axis = d3.axisBottom(xScale);\n        xTranslate = 0;\n        yTranslate = this.props.height - this.props.padding;\n      } else if (this.props.dimension === \"y\") {\n        axis = d3.axisLeft(yScale);\n        xTranslate = this.props.padding;\n        yTranslate = 0;\n      }\n\n      d3.select(this.groupRef.current).attr(\"transform\", \"translate(\".concat(xTranslate, \", \").concat(yTranslate, \")\")).call(axis);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"g\", {\n        ref: this.groupRef,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return Axis;\n}(Component);\n\nexport default Axis;","map":{"version":3,"sources":["/Users/tamara/Documents/scatterplot/client/src/App/Axis/Axis.js"],"names":["React","Component","d3","Axis","props","groupRef","createRef","drawAxis","scales","scalesInstance","getScales","dimension","axis","axisBottom","xScale","xTranslate","yTranslate","height","padding","axisLeft","yScale","select","current","attr","call"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;;IAEMC,I;;;;;AACJ,gBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8EAAMA,KAAN;AACA,UAAKC,QAAL,GAAgBL,KAAK,CAACM,SAAN,EAAhB;AAFiB;AAGlB;;;;wCAEmB;AAClB,WAAKC,QAAL;AACD;;;+BAEU;AACT,UAAIC,MAAM,GAAG,KAAKJ,KAAL,CAAWK,cAAX,CAA0BC,SAA1B,EAAb;;AAEA,UAAI,KAAKN,KAAL,CAAWO,SAAX,QAAJ,EAAkC;AAChCC,QAAAA,IAAI,GAAGV,EAAE,CAACW,UAAH,CAAcC,MAAd,CAAP;AACAC,QAAAA,UAAU,GAAG,CAAb;AACAC,QAAAA,UAAU,GAAG,KAAKZ,KAAL,CAAWa,MAAX,GAAoB,KAAKb,KAAL,CAAWc,OAA5C;AACD,OAJD,MAIO,IAAI,KAAKd,KAAL,CAAWO,SAAX,QAAJ,EAAkC;AACvCC,QAAAA,IAAI,GAAGV,EAAE,CAACiB,QAAH,CAAYC,MAAZ,CAAP;AACAL,QAAAA,UAAU,GAAG,KAAKX,KAAL,CAAWc,OAAxB;AACAF,QAAAA,UAAU,GAAG,CAAb;AACD;;AAEDd,MAAAA,EAAE,CAACmB,MAAH,CAAU,KAAKhB,QAAL,CAAciB,OAAxB,EACGC,IADH,kCACkCR,UADlC,eACiDC,UADjD,QAEGQ,IAFH,CAEQZ,IAFR;AAGD;;;6BAEQ;AACP,aACE;AAAG,QAAA,GAAG,EAAE,KAAKP,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAGD;;;;EAhCgBJ,S;;AAoCnB,eAAeE,IAAf","sourcesContent":["import React, { Component } from 'react';\nimport * as d3 from \"d3\";\n\nclass Axis extends Component {\n  constructor(props) {\n    super(props);\n    this.groupRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.drawAxis();\n  }\n\n  drawAxis() {\n    let scales = this.props.scalesInstance.getScales()\n\n    if (this.props.dimension === `x`) {\n      axis = d3.axisBottom(xScale);\n      xTranslate = 0;\n      yTranslate = this.props.height - this.props.padding;\n    } else if (this.props.dimension === `y`) {\n      axis = d3.axisLeft(yScale);\n      xTranslate = this.props.padding;\n      yTranslate = 0;\n    }\n\n    d3.select(this.groupRef.current)\n      .attr(`transform`, `translate(${xTranslate}, ${yTranslate})`)\n      .call(axis);\n  }\n\n  render() {\n    return (\n      <g ref={this.groupRef}></g>\n    );\n  }\n\n}\n\nexport default Axis;"]},"metadata":{},"sourceType":"module"}