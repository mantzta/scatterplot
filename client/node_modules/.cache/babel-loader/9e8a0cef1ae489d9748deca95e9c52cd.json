{"ast":null,"code":"import _classCallCheck from \"/Users/tamara/Documents/scatterplot/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tamara/Documents/scatterplot/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/tamara/Documents/scatterplot/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/tamara/Documents/scatterplot/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/tamara/Documents/scatterplot/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/tamara/Documents/scatterplot/client/src/App/DataVis/DataVis.js\";\nimport React, { Component } from 'react';\nimport * as d3 from \"d3\";\n\nvar DataVis =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(DataVis, _Component);\n\n  function DataVis(props) {\n    var _this;\n\n    _classCallCheck(this, DataVis);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DataVis).call(this, props));\n    _this.groupRef = React.createRef();\n    return _this;\n  }\n\n  _createClass(DataVis, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.drawCircles();\n    }\n  }, {\n    key: \"drawCircles\",\n    value: function drawCircles() {\n      var scales = this.props.scalesInstance.getScales();\n      d3.select(this.groupRef.current).selectAll(\"circle\").data(this.props.data).enter().append(\"circle\").attr(\"cx\", function (d) {\n        return scales.x(d.x);\n      }).attr(\"cy\", function (d) {\n        return scales.y(d.y);\n      }).attr(\"r\", 3).attr(\"fill\", this.props.color);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"g\", {\n        ref: this.groupRef,\n        className: \"test\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return DataVis;\n}(Component);\n\nexport default DataVis;","map":{"version":3,"sources":["/Users/tamara/Documents/scatterplot/client/src/App/DataVis/DataVis.js"],"names":["React","Component","d3","DataVis","props","groupRef","createRef","drawCircles","scales","scalesInstance","getScales","select","current","selectAll","data","enter","append","attr","d","x","y","color"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;;IAEMC,O;;;;;AACJ,mBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,iFAAMA,KAAN;AACA,UAAKC,QAAL,GAAgBL,KAAK,CAACM,SAAN,EAAhB;AAFiB;AAGlB;;;;wCAEmB;AAClB,WAAKC,WAAL;AACD;;;kCAEa;AACZ,UAAIC,MAAM,GAAG,KAAKJ,KAAL,CAAWK,cAAX,CAA0BC,SAA1B,EAAb;AAEAR,MAAAA,EAAE,CAACS,MAAH,CAAU,KAAKN,QAAL,CAAcO,OAAxB,EACGC,SADH,CACa,QADb,EAEGC,IAFH,CAEQ,KAAKV,KAAL,CAAWU,IAFnB,EAGGC,KAHH,GAIGC,MAJH,CAIU,QAJV,EAKGC,IALH,CAKQ,IALR,EAKc,UAASC,CAAT,EAAY;AACtB,eAAOV,MAAM,CAACW,CAAP,CAASD,CAAC,CAACC,CAAX,CAAP;AACD,OAPH,EAQGF,IARH,CAQQ,IARR,EAQc,UAASC,CAAT,EAAY;AACtB,eAAOV,MAAM,CAACY,CAAP,CAASF,CAAC,CAACE,CAAX,CAAP;AACD,OAVH,EAWGH,IAXH,CAWQ,GAXR,EAWa,CAXb,EAYGA,IAZH,CAYQ,MAZR,EAYgB,KAAKb,KAAL,CAAWiB,KAZ3B;AAaH;;;6BAEU;AACP,aACE;AAAG,QAAA,GAAG,EAAE,KAAKhB,QAAb;AAAuB,QAAA,SAAS,EAAC,MAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAGD;;;;EAhCmBJ,S;;AAoCtB,eAAeE,OAAf","sourcesContent":["import React, { Component } from 'react';\nimport * as d3 from \"d3\";\n\nclass DataVis extends Component {\n  constructor(props) {\n    super(props);\n    this.groupRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.drawCircles();\n  }\n\n  drawCircles() {\n    let scales = this.props.scalesInstance.getScales();\n\n    d3.select(this.groupRef.current)\n      .selectAll(\"circle\")\n      .data(this.props.data)\n      .enter()\n      .append(\"circle\")\n      .attr(\"cx\", function(d) {\n        return scales.x(d.x);\n      })\n      .attr(\"cy\", function(d) {\n        return scales.y(d.y);\n      })\n      .attr(\"r\", 3)\n      .attr(\"fill\", this.props.color);\n}\n\n  render() {\n    return (\n      <g ref={this.groupRef} className=\"test\"></g>\n    );\n  }\n\n}\n\nexport default DataVis;"]},"metadata":{},"sourceType":"module"}